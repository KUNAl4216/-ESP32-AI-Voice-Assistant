#include "FS.h"
#include "SD.h"
#include "SPI.h"
#include "WiFi.h"
#include "WebServer.h"
#include <WiFiClientSecure.h>

// Wi-Fi credentials
const char* ssid = "Your_WIFI_NAME";
const char* password = "Your_WIFI_PASSWORD";

// Deepgram API key
const char* deepgramApiKey = "Your_API_KEY";

// Web server on port 80
WebServer server(80);
WiFiClientSecure client;

// SD card configuration
#define SD_CS 5 // SD card chip select pin
const char* audio_filename = "/tts_output.mp3"; // File to save audio

// Web server endpoints
void handleRoot();
void generateSpeech();
void serveAudio();
void deleteOldFile(const char* filename);

void setup() {
Serial.begin(115200);

// Connect to Wi-Fi
WiFi.begin(ssid, password);
Serial.print("Connecting to Wi-Fi");
while (WiFi.status() != WL_CONNECTED) {
delay(1000);
Serial.print(".");
}
Serial.println("\nConnected to Wi-Fi!");
Serial.println(WiFi.localIP());

// Initialize SD card
if (!SD.begin(SD_CS)) {
Serial.println("Failed to initialize SD card!");
return;
}
Serial.println("SD card initialized.");

// Set up web server routes
server.on("/", handleRoot);
server.on("/generate-speech", generateSpeech);
server.on("/audio", serveAudio);
server.begin();
Serial.println("Web server started!");
}

void loop() {
server.handleClient();
}

// Serve the main web page
void handleRoot() {
String html = "

ESP32 TTS Web Server
";
html += "
Enter text to generate speech:

";
html += "";
html += "";
html += "Generate Speech";
html += "";
if (SD.exists(audio_filename)) {
html += "

Download Last Generated Audio

";
} else {
html += "
No audio file available. Generate one!

";
}
server.send(200, "text/html", html);
}

// Handle TTS generation
void generateSpeech() {
if (!server.hasArg("text")) {
server.send(400, "text/plain", "Missing 'text' parameter!");
return;
}

String text = server.arg("text");
Serial.println("Generating speech for: " + text);

// Delete old file if it exists
deleteOldFile(audio_filename);

client.setInsecure();
if (!client.connect("api.deepgram.com", 443)) {
server.send(500, "text/plain", "Failed to connect to Deepgram API!");
return;
}

// Construct Deepgram TTS API request
String postBody = "{"text":"" + text + "","voice":"en-US-Wavenet-F"}";
client.println("POST /v1/tts HTTP/1.1");
client.println("Host: api.deepgram.com");
client.println("Authorization: Token " + String(deepgramApiKey));
client.println("Content-Type: application/json");
client.println("Content-Length: " + String(postBody.length()));
client.println();
client.println(postBody);

// Skip HTTP headers in the response
while (client.connected()) {
String line = client.readStringUntil('\n');
if (line == "\r") {
break; // Headers end with an empty line
}
}

// Save audio response to SD card
File audioFile = SD.open(audio_filename, FILE_WRITE);
if (!audioFile) {
server.send(500, "text/plain", "Failed to open file for writing!");
return;
}

Serial.println("Receiving audio data...");
while (client.connected() || client.available()) {
if (client.available()) {
audioFile.write(client.read()); // Write binary data directly
}
}
audioFile.close();
client.stop();

server.send(200, "text/plain", "Speech generated and saved as /tts_output.mp3");
Serial.println("Speech generation complete!");
}

// Serve the generated audio file
void serveAudio() {
if (!SD.exists(audio_filename)) {
server.send(404, "text/plain", "Audio file not found!");
return;
}

File audioFile = SD.open(audio_filename);
if (!audioFile) {
server.send(500, "text/plain", "Failed to open audio file!");
return;
}

server.streamFile(audioFile, "audio/mp3");
audioFile.close();
}

// Helper function to delete the old audio file
void deleteOldFile(const char* filename) {
if (SD.exists(filename)) {
SD.remove(filename);
Serial.println("Old audio file deleted.");
}
}
